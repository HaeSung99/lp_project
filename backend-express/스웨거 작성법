/**
 * @swagger
 * /url:
 *   method: # HTTP 메소드 (GET, POST 등)
 *     summary: "간단한 설명"
 *     description: "엔드포인트의 상세 설명"
 *     parameters: # 요청 파라미터
 *       - in: "query" # 위치 (query, path, body, header 등)
 *         name: "paramName" # 파라미터 이름
 *         required: true # 필수 여부
 *         schema:
 *           type: "string" # 데이터 타입
 *     responses: # 응답
 *       200:
 *         description: "성공적인 응답"
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 key:
 *                   type: string
 *                   example: "value"
 */


아래가 실전

const express = require("express");
const router = express.Router();

/**
 * @swagger
 * /hello:
 *   get:
 *     summary: "Hello World API"
 *     description: "Hello World 메시지를 반환합니다."
 *     responses:
 *       200:
 *         description: "성공적으로 메시지를 반환합니다."
 *         content:
 *           application/json:
 *             schema:
 *               type: string
 *               example: "Hello World!"
 */
router.get("/hello", (req, res) => {
  res.json("Hello World!");
});

module.exports = router;


아래가 실전을 토대로 만든 예시

/**
 * @swagger
 * tags:
 *   name: Blacklist
 *   description: 블랙리스트 관련 API
 */

/**
 * @swagger
 * /blacklist/{title}:
 *   get:
 *     summary: 블랙리스트 상세 조회
 *     tags: [Blacklist]
 *     parameters:
 *       - in: path
 *         name: title
 *         required: true
 *         description: 조회할 블랙리스트의 제목
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: 블랙리스트 세부 정보 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: 블랙리스트 세부 정보를 성공적으로 조회했습니다.
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       nickname:
 *                         type: string
 *                         example: 홍길동
 *                       reason:
 *                         type: string
 *                         example: 게임 내 비매너 행동
 *       404:
 *         description: 해당 제목의 블랙리스트를 찾을 수 없음
 *       500:
 *         description: 서버 오류
 */

/**
 * @swagger
 * /blacklist:
 *   get:
 *     summary: 블랙리스트 목록 조회
 *     tags: [Blacklist]
 *     responses:
 *       200:
 *         description: 블랙리스트 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: 글제목-작성자 목록을 성공적으로 조회했습니다.
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       title:
 *                         type: string
 *                         example: "제목 예시"
 *                       author:
 *                         type: string
 *                         example: "작성자 예시"
 *       500:
 *         description: 서버 오류
 */

/**
 * @swagger
 * /blacklist/create:
 *   post:
 *     summary: 블랙리스트 작성
 *     tags: [Blacklist]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 example: "새로운 블랙리스트 제목"
 *               author:
 *                 type: string
 *                 example: "작성자 아이디"
 *               blacklist:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     nickname:
 *                       type: string
 *                       example: "닉네임 예시"
 *                     reason:
 *                       type: string
 *                       example: "비매너 행동"
 *     responses:
 *       201:
 *         description: 블랙리스트 작성 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: 블랙리스트가 성공적으로 작성되었습니다.
 *                 insertedRows:
 *                   type: integer
 *                   example: 3
 *       409:
 *         description: 중복된 제목의 블랙리스트가 이미 존재함
 *       400:
 *         description: 잘못된 요청 데이터
 *       500:
 *         description: 서버 오류
 */

/**
 * @swagger
 * /blacklist/{title}:
 *   delete:
 *     summary: 블랙리스트 삭제
 *     tags: [Blacklist]
 *     parameters:
 *       - in: path
 *         name: title
 *         required: true
 *         description: 삭제할 블랙리스트의 제목
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               userId:
 *                 type: string
 *                 description: 요청한 사용자의 ID
 *                 example: "작성자 아이디"
 *     responses:
 *       200:
 *         description: 블랙리스트 삭제 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: 블랙리스트가 성공적으로 삭제되었습니다.
 *                 deletedRows:
 *                   type: integer
 *                   example: 5
 *       403:
 *         description: 삭제 권한 없음
 *       404:
 *         description: 블랙리스트를 찾을 수 없음
 *       500:
 *         description: 서버 오류
 */
