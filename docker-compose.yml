version: '3.8'
services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000" # next 개발 서버
    volumes:
      - ./frontend:/app # 코드 변경 시 자동 반영
      - /app/node_modules # node_modules는 컨테이너 내부에서 관리
    stdin_open: true
    tty: true
    command: npm run dev

  backend-express:
    build:
      context: ./backend-express
    ports:
      - "5000:5000" # Express 서버
    volumes:
      - ./backend-express:/app
      - /app/node_modules # node_modules는 컨테이너 내부에서 관리
    command: npm run start

  # backend-nest:
  #   build:
  #     context: ./backend-nest
  #   ports:
  #     - "4000:4000" # NestJS 서버
  #   links:
  #     - mysql
  #   volumes:
  #     - ./backend-nest:/app
  #     - /app/node_modules # node_modules는 컨테이너 내부에서 관리
  #   command: npm run start:dev

  backend-python:
    build:
      context: ./backend-python
    ports:
      - "5001:5001"
    volumes:
      - ./backend-python:/app
    env_file:
      - ./backend-python/.env
    command: python app.py
 
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: lp1346
      MYSQL_DATABASE: lp_project
      # MYSQL_USER: app_user // 배포환경에선 사용자를 따로만들어서 권한을줘서 사용하는게좋음
      # MYSQL_PASSWORD: app_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d # SQL 초기화 스크립트 마운트

volumes:
  mysql_data:
